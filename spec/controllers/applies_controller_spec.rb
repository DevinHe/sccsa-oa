require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AppliesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Apply. As you add validations to Apply, be sure to
  # adjust the attributes here as well.
  let(:applier) { Factory :applier }
  let(:category) { Factory :category }
  let(:project) { Factory :project, category_id: category.id }
  let(:valid_attributes) {
    {user_id: applier.id, project_id: project.id, category_id: category.id, requirement: "requirement", site: "site", facilities: "facilities", address: "address", implement_time: Time.now, implement_date: Date.today, p_serial: "SCCSA_test001"}
  }

  let(:invalid_attributes) {
    {user_id: applier.id, project_id: project.id, category_id: category.id, requirement: "", site: "site", facilities: "facilities", address: "address", implement_time: Time.now, implement_date: Date.today, p_serial: "SCCSA_test002"}
  }

  before(:each){ sign_in applier }
  describe "GET #index" do
    it "assigns all applies as @applies" do
      apply = Apply.create! valid_attributes
      get :index, {}
      expect(assigns(:applies)).to eq([apply])
    end
  end

  describe "GET #show" do
    it "assigns the requested apply as @apply" do
      apply = Apply.create! valid_attributes
      get :show, {:id => apply.to_param}
      expect(assigns(:apply)).to eq(apply)
    end
  end

  describe "GET #new" do
    it "assigns a new apply as @apply" do
      get :new, {}
      expect(assigns(:apply)).to be_a_new(Apply)
    end
  end

  describe "GET #edit" do
    it "assigns the requested apply as @apply" do
      apply = Apply.create! valid_attributes
      get :edit, {:id => apply.to_param}
      expect(assigns(:apply)).to eq(apply)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Apply" do
        expect {
          post :create, {:apply => valid_attributes}
        }.to change(Apply, :count).by(1)
      end

      it "assigns a newly created apply as @apply" do
        post :create, {:apply => valid_attributes}
        expect(assigns(:apply)).to be_a(Apply)
        expect(assigns(:apply)).to be_persisted
      end

      it "redirects to the created apply" do
        post :create, {:apply => valid_attributes}
        expect(response).to redirect_to(Apply.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved apply as @apply" do
        post :create, {:apply => invalid_attributes}
        expect(assigns(:apply)).to be_a_new(Apply)
      end

      it "re-renders the 'new' template" do
        post :create, {:apply => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {requirement: "changed requirement"}
      }

      it "updates the requested apply" do
        apply = Apply.create! valid_attributes
        put :update, {:id => apply.to_param, :apply => new_attributes}
        apply.reload
        expect(apply.requirement).to  eq("changed requirement")
      end

      it "assigns the requested apply as @apply" do
        apply = Apply.create! valid_attributes
        put :update, {:id => apply.to_param, :apply => valid_attributes}
        expect(assigns(:apply)).to eq(apply)
      end

      it "redirects to the apply" do
        apply = Apply.create! valid_attributes
        put :update, {:id => apply.to_param, :apply => valid_attributes}
        expect(response).to redirect_to("#{apply_url(apply)}?from=again")
      end
    end

    context "with invalid params" do
      it "assigns the apply as @apply" do
        apply = Apply.create! valid_attributes
        put :update, {:id => apply.to_param, :apply => invalid_attributes}
        expect(assigns(:apply)).to eq(apply)
      end

      it "re-renders the 'edit' template" do
        sign_in applier
        apply = Apply.create! valid_attributes
        put :update, {:id => apply.to_param, :apply => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested apply" do
      apply = Apply.create! valid_attributes
      expect {
        delete :destroy, {:id => apply.to_param}
      }.to change(Apply, :count).by(-1)
    end

    it "redirects to the applies list" do
      apply = Apply.create! valid_attributes
      delete :destroy, {:id => apply.to_param}
      expect(response).to redirect_to(applies_url)
    end
  end

end

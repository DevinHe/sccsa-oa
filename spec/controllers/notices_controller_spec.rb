require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe NoticesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Notice. As you add validations to Notice, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {title: 'test',content: 'content'}
  }

  let(:invalid_attributes) {
    {title: '',content: ''}
  }

  let(:admin) { Factory :admin }

  describe "GET #index" do
    it "assigns all notices as @notices" do
      sign_in admin
      notice = Notice.create! valid_attributes
      get :index, {}
      expect(assigns(:notices)).to eq([notice])
    end
  end

  describe "GET #show" do
    it "assigns the requested notice as @notice" do
      sign_in admin
      notice = Notice.create! valid_attributes
      get :show, {:id => notice.to_param}
      expect(assigns(:notice)).to eq(notice)
    end
  end

  describe "GET #new" do
    it "assigns a new notice as @notice" do
      sign_in admin
      get :new, {}
      expect(assigns(:notice)).to be_a_new(Notice)
    end
  end

  describe "GET #edit" do
    it "assigns the requested notice as @notice" do
      sign_in admin
      notice = Notice.create! valid_attributes
      get :edit, {:id => notice.to_param}
      expect(assigns(:notice)).to eq(notice)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      before(:each){ sign_in admin }
      it "creates a new Notice" do
        expect {
          post :create, {:notice => valid_attributes}
        }.to change(Notice, :count).by(1)
      end

      it "assigns a newly created notice as @notice" do
        post :create, {:notice => valid_attributes}
        expect(assigns(:notice)).to be_a(Notice)
        expect(assigns(:notice)).to be_persisted
      end

      it "redirects to the created notice" do
        post :create, {:notice => valid_attributes}
        expect(response).to redirect_to(Notice.last)
      end
    end

    context "with invalid params" do
      before(:each){ sign_in admin }

      it "assigns a newly created but unsaved notice as @notice" do
        post :create, {:notice => invalid_attributes}
        expect(assigns(:notice)).to be_a_new(Notice)
      end

      it "re-renders the 'new' template" do
        post :create, {:notice => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {content: 'changed content'}
      }
      before(:each){ sign_in admin }

      it "updates the requested notice" do
        notice = Notice.create! valid_attributes
        put :update, {:id => notice.to_param, :notice => new_attributes}
        notice.reload
        expect(notice.content).to eq("changed content")
      end

      it "assigns the requested notice as @notice" do
        notice = Notice.create! valid_attributes
        put :update, {:id => notice.to_param, :notice => valid_attributes}
        expect(assigns(:notice)).to eq(notice)
      end

      it "redirects to the notice" do
        notice = Notice.create! valid_attributes
        put :update, {:id => notice.to_param, :notice => valid_attributes}
        expect(response).to redirect_to(notice)
      end
    end

    context "with invalid params" do
      before(:each){ sign_in admin }

      it "assigns the notice as @notice" do
        notice = Notice.create! valid_attributes
        put :update, {:id => notice.to_param, :notice => invalid_attributes}
        expect(assigns(:notice)).to eq(notice)
      end

      it "re-renders the 'edit' template" do
        notice = Notice.create! valid_attributes
        put :update, {:id => notice.to_param, :notice => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each){ sign_in admin }

    it "destroys the requested notice" do
      notice = Notice.create! valid_attributes
      expect {
        delete :destroy, {:id => notice.to_param}
      }.to change(Notice, :count).by(-1)
    end

    it "redirects to the notices list" do
      notice = Notice.create! valid_attributes
      delete :destroy, {:id => notice.to_param}
      expect(response).to redirect_to(notices_url)
    end
  end

end

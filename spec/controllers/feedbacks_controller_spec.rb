require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe FeedbacksController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Feedback. As you add validations to Feedback, be sure to
  # adjust the attributes here as well.
  let(:user) { Factory :user }
  let(:apply) { Factory :apply }

  let(:valid_attributes) {
    {user_id: user.id, apply_id: apply.id, content: "content", coach: "coach", suggestion: "suggestion", population: "population", attachment: fixture_file_upload('test.txt', 'text/plain')}
  }

  let(:invalid_attributes) {
    {user_id: user.id, apply_id: apply.id, content: "", coach: "", suggestion: "", population: "", attachment: fixture_file_upload('test.txt', 'text/plain')}
  }

  describe "GET #show" do
    before(:each){ sign_in user }
    it "assigns the requested feedback as @feedback" do
      distribute = Factory :distribute,apply: apply
      feedback = Factory :feedback,apply: apply
      get :show, {:id => feedback.to_param}
      expect(assigns(:feedback)).to eq(feedback)
      expect(assigns(:feedback)).to be_a(Feedback)
    end
  end

  describe "GET #new" do
    before(:each){ sign_in user }
    it "assigns a new feedback as @feedback" do
      get :new, {}
      expect(assigns(:feedback)).to be_a_new(Feedback)
    end
  end

  describe "GET #edit" do
    before(:each){ sign_in user }
    it "assigns the requested feedback as @feedback" do
      distribute = Factory :distribute,apply: apply
      feedback = Feedback.create! valid_attributes
      get :edit, {:id => feedback.to_param}
      expect(assigns(:feedback)).to eq(feedback)
    end
  end

  describe "POST #create" do
    before(:each){ sign_in user }
    context "with valid params" do
      before(:each){ Factory :distribute,apply: apply }
      it "creates a new Feedback" do
        expect {
          post :create, {:feedback => valid_attributes}
        }.to change(Feedback, :count).by(1)
      end

      it "assigns a newly created feedback as @feedback" do
        post :create, {:feedback => valid_attributes}
        expect(assigns(:feedback)).to be_a(Feedback)
        expect(assigns(:feedback)).to be_persisted
      end

      it "redirects to the created feedback" do
        post :create, {:feedback => valid_attributes}
        expect(response).to redirect_to(Feedback.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved feedback as @feedback" do
        post :create, {:feedback => invalid_attributes}
        expect(assigns(:feedback)).to be_a_new(Feedback)
      end

      it "re-renders the 'new' template" do
        post :create, {:feedback => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before(:each){ sign_in user }
    before(:each){ Factory :distribute,apply: apply }
    context "with valid params" do
      let(:new_attributes) {
        {content: "changed content"}
      }

      it "updates the requested feedback" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => new_attributes}
        feedback.reload
        expect(feedback.content).to  eq("changed content")
      end

      it "assigns the requested feedback as @feedback" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => valid_attributes}
        expect(assigns(:feedback)).to eq(feedback)
      end

      it "redirects to the feedback" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => valid_attributes}
        expect(response).to redirect_to(feedback)
      end
    end

    context "with invalid params" do
      it "assigns the feedback as @feedback" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => invalid_attributes}
        expect(assigns(:feedback)).to eq(feedback)
      end

      it "re-renders the 'edit' template" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  # describe "DELETE #destroy" do
  #   before(:each){ sign_in user }
  #   it "destroys the requested feedback" do
  #     feedback = Feedback.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => feedback.to_param}
  #     }.to change(Feedback, :count).by(-1)
  #   end

  #   it "redirects to the feedbacks list" do
  #     feedback = Feedback.create! valid_attributes
  #     delete :destroy, {:id => feedback.to_param}
  #     expect(response).to redirect_to(feedbacks_url)
  #   end
  # end

end

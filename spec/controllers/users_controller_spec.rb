require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  let(:user) { Factory :user }
  let(:admin) { Factory :admin }

  describe "GET #index" do

    it "should have a index action" do
      sign_in admin
      get :index
      expect(response).to have_http_status(:success)
      expect(response).to be_success
      expect(response).to render_template("index")
    end

    it "should not allow anonymous access" do
      get :index
      expect(response).not_to have_http_status(:success)
      expect(response).not_to be_success
    end
  end

  describe "GET #show" do
    it "should have a show action" do
      sign_in admin
      get :show,id: user.id
      expect(response).to be_success
      expect(response).to render_template("show")
    end

    it "should not allow anonymous access" do
      get :show,id: user.id
      expect(response).not_to be_success
    end
  end

  describe "GET #new" do
    it "should have a show action" do
      sign_in admin
      get :new
      expect(response).to be_success
      expect(response).to render_template("new")
    end

    it "should not allow anonymous access" do
      get :new
      expect(response).not_to be_success
    end
  end

  describe "GET #edit" do
    it "should have a show action" do
      sign_in admin
      get :edit, id: user.id
      expect(response).to be_success
      expect(response).to render_template("edit")
    end

    it "should not allow anonymous access" do
      get :edit, id: user.id
      expect(response).not_to be_success
    end
  end

  describe "PUT #update" do
    before(:each) { sign_in admin }
    context "with valid params" do
      let(:valid_params) { {unit: "test", password: "password"} }
      it "updates the requested user" do
        put :update, {:id => user.to_param, :user => valid_params}
        user.reload
        expect(user.unit).to eq("test")
      end

      it "assigns the requested user as @user" do
        put :update, {:id => user.to_param, :user => valid_params}
        expect(assigns(:user)).to eq(user)
      end

      it "redirects to the user" do
        put :update, {:id => user.to_param, :user => valid_params}
        expect(response).to redirect_to(user)
      end
    end

    context "with invalid params" do
      it "assigns the user as @user" do
        put :update, {:id => user.to_param, :user => {email: "test"}}
        expect(assigns(:user)).to eq(user)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => user.to_param, :user => {email: "test"}}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    let(:user1) { Factory.create :user }
    before(:each) { sign_in user1 }

    it "destroys the requested user" do
      expect {
        delete :destroy, {:id => user1.to_param}
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      delete :destroy, {:id => user1.to_param}
      expect(response).to redirect_to(users_url)
    end
  end

end

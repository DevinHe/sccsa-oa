require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe VerifiesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Verify. As you add validations to Verify, be sure to
  # adjust the attributes here as well.

  let(:distributor) { Factory :distributor }
  let(:verify) { Factory :verify }
  let(:apply) { Factory :apply }

  let(:valid_attributes) {
    {is_pass: false,content: "time is over",user_id: distributor.id,apply_id: apply.id}
  }

  let(:invalid_attributes) {
    {user_id: '',apply_id: ''}
  }
  describe "GET #edit" do
    it "assigns the requested verify as @verify" do
      sign_in distributor
      get :edit, {:id => verify.to_param}
      expect(assigns(:verify)).to eq(verify)
    end
  end

  describe "POST #create" do
    before(:each){ sign_in distributor }
    context "with valid params" do
      it "creates a new Verify" do
        expect {
          post :create, {:verify => valid_attributes}
        }.to change(Verify, :count).by(1)
      end

      it "assigns a newly created verify as @verify" do
        post :create, {:verify => valid_attributes}
        expect(assigns(:verify)).to be_a(Verify)
        expect(assigns(:verify)).to be_persisted
      end

      it "redirects to the created verify's apply show page" do
        post :create, {:verify => valid_attributes}
        expect(response).to redirect_to(apply_path(Verify.first.apply))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved verify as @verify" do
        post :create, {:verify => invalid_attributes}
        expect(assigns(:verify)).to be_a_new(Verify)
      end

      it "re-renders the 'applies/show' template" do
        post :create, {:verify => invalid_attributes}
        expect(response).to render_template("applies/show")
      end
    end
  end

  describe "PUT #update" do
    before(:each){ sign_in distributor }

    context "with valid params" do
      let(:new_attributes) {
         {content: "time is over test"}
      }

      it "updates the requested verify" do
        put :update, {:id => verify.to_param, :verify => new_attributes}
        verify.reload
        expect(verify.content).to eq("time is over test")
      end

      it "assigns the requested verify as @verify" do
        put :update, {:id => verify.to_param, :verify => valid_attributes}
        expect(assigns(:verify)).to eq(verify)
        verify.reload
        expect(verify.content).to eq("time is over")
      end

      it "redirects to the verify's apply show page" do
        put :update, {:id => verify.to_param, :verify => valid_attributes}
        expect(response).to redirect_to(apply_path(Verify.first.apply))
      end
    end

    context "with invalid params" do
      it "assigns the verify as @verify" do
        put :update, {:id => verify.to_param, :verify => invalid_attributes}
        expect(assigns(:verify)).to eq(verify)
      end

      it "re-renders the 'applies/show' template" do
        put :update, {:id => verify.to_param, :verify => invalid_attributes}
        expect(response).to render_template("applies/show")
      end
    end
  end

end
